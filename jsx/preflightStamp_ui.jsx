// custom dialog for getting preflight stamp info from user// ref: AlertBoxBuilder1.jsx from Adobe Javascript Tools Guidefunction pfDialog(){ }/**	Creates the Dialog and adds the ScriptUI	components and event handlers.*/pfDialog.prototype.run = function(title, date){    var mgn = 25;	function createDialog() {		// Create an empty dialog window near the center of the screen		var dlg = new Window('dialog', '|) Marks - Preflight Stamp');		dlg.frameLocation = [800, 400];		dlg.orientation = ['column'];		dlg.alignChildren = ['fill', 'top']; 		dlg.spacing = 4;		// File info section		dlg.title = dlg.add('statictext', undefined, title);		dlg.title.alignment = 'center';        		var rJob = dlg.rJob;		rJob = dlg.add('group');		rJob.orientation = 'row';		rJob.jobGrp = rJob.add('group');		rJob.jobGrp.alignment = ['left', 'center'];		rJob.jobGrp.spacing = 2;		rJob.jobGrp.margins.left = mgn;		rJob.jobGrp.lbl = rJob.jobGrp.add('statictext', undefined, 'Job#:');		rJob.jobGrp.val = rJob.jobGrp.add('edittext', undefined, '123456');		rJob.jobGrp.val.preferredSize = [75, 20];        		rJob.dateGrp = rJob.add('group');		rJob.dateGrp.alignment = ['right', 'center'];		rJob.dateGrp.spacing = 2;		rJob.dateGrp.margins.right = mgn;		rJob.dateGrp.lbl = rJob.dateGrp.add('statictext', undefined, 'Date:');		rJob.dateGrp.val = rJob.dateGrp.add('statictext', undefined, date);				var rSize = dlg.rSize;		rSize = dlg.add('group');		rSize.orientation = 'row';		rSize.margins.left = mgn;		rSize.margins.right = mgn;		rSize.lbl = rSize.add('statictext', undefined, 'Size:');            		dlg.sep = dlg.add('panel', undefined, '');		dlg.sep.preferredSize = [334, 0];                		// Color Info section		/// spots		dlg.spots = dlg.add('group');		var spots = dlg.spots;		spots.orientation = 'row'				dlg.procs = dlg.add('group');														dlg.sep = dlg.add('panel', undefined, '');		dlg.sep.preferredSize = [334, 0];        		// Preflight section		/// fonts		dlg.rFont = dlg.add('group');		var rFont = dlg.rFont;		rFont.orientation = 'row';		rFont.spacing = 4;		rFont.chk = rFont.add('checkbox', undefined, 'Fonts:');		rFont.chk.graphics.font = "dialog:12";				rFont.radGrp = rFont.add('group');		rFont.radGrp.spacing = 8;		rFont.radGrp.rdLive = rFont.radGrp.add('radiobutton', undefined, 'Live');		rFont.radGrp.rdOutl = rFont.radGrp.add('radiobutton', undefined, 'Outlined');		rFont.radGrp.rdBoth = rFont.radGrp.add('radiobutton', undefined, 'Outlined + Live Files');				dlg.r2Font = dlg.add('group');		var r2Font = dlg.r2Font;		r2Font.orientation = 'row';		r2Font.spacing = 4;		r2Font.margins.left = 40;		r2Font.chkMissing = r2Font.add('checkbox', undefined, 'Missing Fonts');		/// images		dlg.rImg = dlg.add('group');		var rImg  = dlg.rImg;		rImg.orientation = 'row';		rImg.spacing = 4;		rImg.chk = rImg.add('checkbox', undefined, 'Images:');		rImg.chk.graphics.font = "dialog:12";				rImg.chkGrp = rImg.add('group');		rImg.chkGrp.linked = rImg.chkGrp.add('checkbox', undefined, 'Linked');		rImg.chkGrp.embedded = rImg.chkGrp.add('checkbox', undefined, 'Embedded');		rImg.chkGrp.lowres = rImg.chkGrp.add('checkbox', undefined, 'Low Resolution');				dlg.r2Img = dlg.add('group');		var r2Img = dlg.r2Img;		r2Img.orientation = 'row';		r2Img.spacing = 4;		r2Img.margins.left = 40;		r2Img.chkMissing = r2Img.add('checkbox', undefined, 'Missing Images'); 		/// barcodes		dlg.rBarc = dlg.add('group');		var rBarc  = dlg.rBarc;		rBarc.orientation = 'row';		rBarc.spacing = 4;		rBarc.chk = rBarc.add('checkbox', undefined, 'Barcode:');		rBarc.chk.graphics.font = "dialog:12";				rBarc.radGrp = rBarc.add('group');		rBarc.radGrp.spacing = 8;		rBarc.radGrp.rdSupp = rBarc.radGrp.add('radiobutton', undefined, '# Supplied');		rBarc.radGrp.rdInco = rBarc.radGrp.add('radiobutton', undefined, 'Incomplete');		rBarc.radGrp.margins.right = 10;				rBarc.chkFPO = rBarc.add('checkbox', undefined, 'FPO');		/// white plate		dlg.rWht = dlg.add('group');		var rWht  = dlg.rWht;		rWht.orientation = 'row';		rWht.spacing = 4;		rWht.chk = rWht.add('checkbox', undefined, 'White Plate:');		rWht.chk.graphics.font = "dialog:12";				rWht.radGrp = rWht.add('group');		rWht.radGrp.spacing = 8;		rWht.radGrp.rdCust = rWht.radGrp.add('radiobutton', undefined, 'Custom');		rWht.radGrp.rdFull = rWht.radGrp.add('radiobutton', undefined, 'Full');		rWht.radGrp.rdID = rWht.radGrp.add('radiobutton', undefined, 'Custom Identified');				dlg.r2Wht = dlg.add('group');		var r2Wht = dlg.r2Wht;		r2Wht.orientation = 'row';		r2Wht.spacing = 4;		r2Wht.alignment = 'right';		r2Wht.lbl = r2Wht.add('statictext', undefined, 'Est. Creation Time:');		r2Wht.val = r2Wht.add('edittext', undefined, '0');		r2Wht.unit = r2Wht.add('statictext', undefined, 'minutes');		r2Wht.val.preferredSize = [30, 20];		/// additional plates		dlg.rPlt = dlg.add('group');		var rPlt = dlg.rPlt;		rPlt.orientation = 'row';		rPlt.spacing = 4;		rPlt.chk = rPlt.add('checkbox', undefined, 'Plates:');		rPlt.chk.graphics.font = "dialog:12";				rPlt.chkGrp = rPlt.add('group');		rPlt.chkGrp.matte = rPlt.chkGrp.add('checkbox', undefined, 'Matte');		rPlt.chkGrp.gloss = rPlt.chkGrp.add('checkbox', undefined, 'Gloss');		rPlt.chkGrp.foil = rPlt.chkGrp.add('checkbox', undefined, 'Foil');		rPlt.chkGrp.emb = rPlt.chkGrp.add('checkbox', undefined, 'Emboss');				dlg.r2Plt = dlg.add('group');		var r2Plt = dlg.r2Plt;		r2Plt.orientation = 'row';		r2Plt.spacing = 4;		r2Plt.margins.left = 40;		r2Plt.chkOther = r2Plt.add('checkbox', undefined, 'Other:');		r2Plt.val = r2Plt.add('edittext', undefined, '');		r2Plt.val.preferredSize = [200, 20];				dlg.sep = dlg.add('panel', undefined, '');		dlg.sep.preferredSize = [334, 0];     						// Notes		dlg.rNote = dlg.add('group');		var rNote = dlg.rNote;		rNote.orientation = 'column';		rNote.alignChildren = ['fill', 'top'];		rNote.spacing = 2;		rNote.row = rNote.add('group');		rNote.row.lbl = rNote.row.add('statictext', undefined, 'Notes:');		rNote.row.alertFonts = rNote.row.add('edittext', undefined, 'File is Missing Fonts.');		rNote.row.alertFonts.enabled = false;		rNote.row.alertFonts.visible = false;		rNote.row.alertImgs = rNote.row.add('edittext', undefined, 'File is Missing Images.');		rNote.row.alertImgs.enabled = false;		rNote.row.alertImgs.visible = false;		rNote.val = rNote.add('edittext', undefined, '', {multiline:true});		rNote.val.alignment = ['fill', 'center'];		rNote.val.preferredSize.height = 60;		// Add buttons to create or cancel		dlg.btnGrp = dlg.add('group');		dlg.btnGrp.alignment = 'right';		dlg.btnGrp.cancelBtn = dlg.btnGrp.add('button', undefined, 'Cancel', {name:'cancel'});		dlg.btnGrp.createBtn = dlg.btnGrp.add('button', undefined, 'Create Stamp', {name:'ok'});		return dlg;	} // createDialog	/* This function initializes the values in the controls of the dialog and sets up onclick listenters */	function initializeDialog(dlg) {		var i;				// fonts		dlg.rFont.chk.value = false;		dlg.rFont.radGrp.rdLive.value = true; // default radio button		dlg.rFont.radGrp.enabled = dlg.r2Font.enabled = false;		dlg.rFont.chk.onClick = function () {			dlg.rFont.radGrp.enabled = (dlg.rFont.chk.value) ? true : false;			dlg.r2Font.enabled = (dlg.rFont.chk.value && dlg.rFont.radGrp.rdLive.value) ? true : false;		};		for (i = 0; i < dlg.rFont.radGrp.children.length; i++) {			dlg.rFont.radGrp.children[i].onClick = function () {				dlg.r2Font.enabled = (dlg.rFont.radGrp.rdLive.value) ? true : false;			};		}		dlg.r2Font.chkMissing.onClick = function () {			dlg.rNote.row.alertFonts.visible = dlg.r2Font.chkMissing.value;		}			// images		dlg.rImg.chk.value = false;		dlg.rImg.chkGrp.enabled = dlg.r2Img.enabled = false;		dlg.rImg.chk.onClick = function () {			dlg.rImg.chkGrp.enabled = (dlg.rImg.chk.value) ? true : false;			dlg.r2Img.enabled = (dlg.rImg.chk.value && dlg.rImg.chkGrp.linked.value) ? true : false;		};		dlg.rImg.chkGrp.linked.onClick = function () {			dlg.r2Img.enabled = (dlg.rImg.chkGrp.linked.value) ? true : false;		};		dlg.r2Img.chkMissing.onClick = function () {			dlg.rNote.row.alertImgs.visible = dlg.r2Img.chkMissing.value;		}    		// barcode		dlg.rBarc.chk.value = false;		dlg.rBarc.radGrp.rdSupp.value = true; // default radio button		dlg.rBarc.radGrp.enabled = dlg.rBarc.chkFPO.enabled = false;		dlg.rBarc.chk.onClick = function () {			dlg.rBarc.radGrp.enabled = dlg.rBarc.chkFPO.enabled = (dlg.rBarc.chk.value) ? true : false;		}			// white plate		dlg.rWht.chk.value = false;		dlg.rWht.radGrp.rdCust.value = true; // default radio button		dlg.rWht.radGrp.enabled = dlg.r2Wht.enabled = false;		dlg.rWht.chk.onClick = function () {			dlg.rWht.radGrp.enabled = (dlg.rWht.chk.value) ? true : false;			dlg.r2Wht.enabled = (dlg.rWht.chk.value && dlg.rWht.radGrp.rdID.value) ? true : false;		}		for (i = 0; i < dlg.rWht.radGrp.children.length; i++) {			dlg.rWht.radGrp.children[i].onClick = function () {				dlg.r2Wht.enabled = (dlg.rWht.radGrp.rdID.value) ? true : false;			}		}		// plates		dlg.rPlt.chk.value = false;		dlg.rPlt.chkGrp.enabled = dlg.r2Plt.enabled = false;		dlg.rPlt.chk.onClick = function () {			dlg.rPlt.chkGrp.enabled = dlg.r2Plt.enabled = (dlg.rPlt.chk.value) ? true : false;			dlg.r2Plt.val.enabled = (dlg.rPlt.chk.value && dlg.r2Plt.chkOther.value) ? true : false;		}		dlg.r2Plt.chkOther.onClick = function () {			dlg.r2Plt.val.enabled = (dlg.r2Plt.chkOther.value) ? true : false;		}		// The Create and Cancel buttons close this dialog		dlg.btnGrp.createBtn.onClick = function () { this.parent.parent.close(1); };		dlg.btnGrp.cancelBtn.onClick = function () { this.parent.parent.close(2); };	} // initializeDialog	// returns text of selected radio button given readio button group	function radBtnSelected (radGrp) {		for (var i = 0; i < radGrp.children.length; i++) {			if (radGrp.children[i].value == true)			return radGrp.children[i].text;		}	}	/* This function invokes the dialog and returns its result */	function runDialog(dialog) {		return dialog.show();	}	//------------- "Main" -------------//	// Create and initialize the user-input dialog	var dialog = createDialog(); 	initializeDialog(dialog);	// return object with input information	if (runDialog(dialog) == 1 ){		return 1;	}		return 2;}new pfDialog().run('some text', '3/9/18 12:30pm');