// custom dialog for getting preflight stamp info from user// ref: AlertBoxBuilder1.jsx from Adobe Javascript Tools Guidefunction pfDialog(){ }/**	Creates the Dialog and adds the ScriptUI	components and event handlers.*/pfDialog.prototype.run = function(title, date){	var retval = true;	function createDialog() {		// Create an empty dialog window near the center of the screen		var dlg = new Window('dialog', '|) Marks - Preflight Stamp');		dlg.frameLocation = [800, 400];				// Add a container panel for File Information section		dlg.fiPnl = dlg.add('panel', undefined, 'File Information');		// add the panel's child components		dlg.fiPnl.title = dlg.fiPnl.add('statictext', undefined, title);        		dlg.fiPnl.title.alignment = "center";		dlg.fiPnl.jobGrp = dlg.fiPnl.add('group');		dlg.fiPnl.jobGrp.alignment = ["left", "top"];		dlg.fiPnl.jobGrp.alignChildren = "left";		dlg.fiPnl.jobGrp.lbl = dlg.fiPnl.jobGrp.add('statictext', undefined, 'Job#:');		dlg.fiPnl.jobGrp.val = dlg.fiPnl.jobGrp.add('edittext', undefined, '123456');		dlg.fiPnl.jobGrp.val.preferredSize = [75, 20];        		dlg.fiPnl.dateGrp = dlg.fiPnl.add('group');		dlg.fiPnl.dateGrp.alignment = ["right", "top"];		dlg.fiPnl.dateGrp.alignChildren = "right";		dlg.fiPnl.dateGrp.lbl = dlg.fiPnl.dateGrp.add('statictext', undefined, 'Date:');		dlg.fiPnl.dateGrp.val = dlg.fiPnl.dateGrp.add('statictext', undefined, date);        		dlg.fiPnl.msg = dlg.fiPnl.add('group');		dlg.fiPnl.msgWidth = dlg.fiPnl.add('group');		dlg.fiPnl.msgHeight = dlg.fiPnl.add('group');		with (dlg.fiPnl) {			msg.st = msg.add('statictext', undefined, 'Alert message:');			msg.et = msg.add('edittext', undefined, '<your message here>', {multiline:true});			msg.et.preferredSize = [200,60];			msgWidth.st = msgWidth.add('statictext', undefined, 'Message width:');			msgWidth.sl = msgWidth.add('slider', undefined, 150, 100, 300);			msgWidth.sl.preferredSize = [150, 20];			msgWidth.et = msgWidth.add('edittext');			msgWidth.et.preferredSize = [40, 20];			msgHeight.st = msgHeight.add('statictext', undefined, 'Message height:');			msgHeight.sl = msgHeight.add('slider', undefined, 20, 20, 300);			msgHeight.sl.preferredSize = [150, 20];			msgHeight.et = msgHeight.add('edittext');			msgHeight.et.preferredSize = [40, 20];		}				// Add a container panel for Color Information section		dlg.ciPnl = dlg.add('panel', undefined, 'Color Information');         		// Add a container panel for Preflight Information section		dlg.piPnl = dlg.add('panel', undefined, 'Preflight Information');               		// Add a container panel for Notes section		dlg.ntPnl = dlg.add('panel', undefined, 'Notes');		dlg.ntPnl.alignChildren = "center";		// add the panel's child components		dlg.ntPnl.msg = dlg.ntPnl.add('group');		dlg.ntPnl.msg.et = dlg.ntPnl.msg.add('edittext', undefined, '', {multiline:true});		dlg.ntPnl.msg.et.preferredSize = [300,60];                /*		// Add a checkbox to control the presence of buttons to dismiss the alert box		dlg.hasBtnsCb = dlg.add('checkbox', undefined, 'Has alert buttons?');		// Add a panel to determine alignment of buttons on the alert box		dlg.alertBtnsPnl = dlg.add('panel', undefined, 'Button alignment');		dlg.alertBtnsPnl.orientation = "row";		dlg.alertBtnsPnl.alignLeftRb =		dlg.alertBtnsPnl.add('radiobutton', undefined, 'Left');		dlg.alertBtnsPnl.alignCenterRb =		dlg.alertBtnsPnl.add('radiobutton', undefined, 'Center');		dlg.alertBtnsPnl.alignRightRb =		dlg.alertBtnsPnl.add('radiobutton', undefined, 'Right');*/			// Add buttons to create or cancel		dlg.btnGrp = dlg.add('group');		dlg.btnGrp.alignment = "right";		dlg.btnGrp.createBtn = dlg.btnGrp.add('button', undefined, 'Create', {name:'ok'});		dlg.btnGrp.cancelBtn = dlg.btnGrp.add('button', undefined, 'Cancel', {name:'cancel'});	        		return dlg;	} // createDialog	/**	 This function initializes the values in the controls	 of the builder dialog 	*/	function initializeDialog(dialog) {		// Set up initial control states		with (dialog) {			with (fiPnl) {				msgWidth.et.text = msgWidth.sl.value;				msgHeight.et.text = msgHeight.sl.value;			}		}		// The edittext fields and scrollbars in msgPnl are connected		with (dialog.fiPnl) {			msgWidth.et.onChange = function () { this.parent.parent.msgWidth.sl.value = Number(this.text); };			msgWidth.sl.onChanging = function () { this.parent.parent.msgWidth.et.text = Math.floor(this.value); };			msgHeight.et.onChange = function () { this.parent.parent.msgHeight.sl.value = Number(this.text); };			msgHeight.sl.onChanging = function () { this.parent.parent.msgHeight.et.text = Math.floor(this.value); };		}    		// The Create and Cancel buttons close this dialog		dialog.btnGrp.createBtn.onClick = function () { this.parent.parent.close(1); };		dialog.btnGrp.cancelBtn.onClick = function () { this.parent.parent.close(2); };	} // initializeDialog	/**	 This function invokes the dialog and returns its result	*/	function runDialog(dialog) {		return dialog.show();	}	/**	 This function creates and returns a string containing a dialog	 resource specification that will create an Alert dialog using	 the parameters the user entered in the builder dialog. 	*/	function createResource(dialog) {		// Define the initial part of the resource spec with dialog parameters		var res = "dialog { " + stringProperty("text", dialog.msgPnl.title.et.text) + "\n";				// Define the alert message statictext element, sizing it as user specified		var textWidth = Number(dialog.msgPnl.msgWidth.et.text);		var textHeight = Number(dialog.msgPnl.msgHeight.et.text);		res += " msg: StaticText { " + stringProperty("text", dialog.msgPnl.msg.et.text) + 			" preferredSize: [" + textWidth + ", " + textHeight + "],\n" +			" alignment:['center','top'], properties:{multiline:true} }";				// Define buttons if desired		var hasButtons = dialog.hasBtnsCb.value;		if (hasButtons) {			var groupAlign = "center";			// Align buttons as specified			if (dialog.alertBtnsPnl.alignLeftRb.value) {				groupAlign = "left";			}			else if (dialog.alertBtnsPnl.alignRightRb.value) {				groupAlign = "right";			}						res += ",\n" + " btnGroup: Group {\n" + stringProperty(" alignment", groupAlign) +				"\n" + " okBtn: Button { " + stringProperty("text", "OK") +"},\n";			res += " cancelBtn: Button { " + stringProperty("text", "Cancel") +"}" + " }";		}		// done		res += "\n}";		return res;	}	// Utility string-building function	function stringProperty(pname, pval) {		return pname + ":'" + pval + "', ";	}	//------------- "Main" -------------//	// Create and initialize the user-input dialog	var dialog = createDialog(); 	initializeDialog(dialog);	// Show the user-input dialog, and save the returned resource string	if (runDialog(dialog) == 1 ){		// Create the Alert dialog resource-specification string		var resSpec = createResource(dialog);		// Write the resource string to a file w/platform file-save dialog		var fname = File.saveDialog('Save resource specification');		var f = File(fname);		if (f.open('w')) {			var ok = f.write(resSpec);			if (ok) {				ok = f.close();			}			if (! ok) {				alert("Error creating " + fname + ": " + f.error);			}		}	}		return retval;}new pfDialog().run('some text', '3/9/18 12:30pm');